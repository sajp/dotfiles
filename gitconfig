[user]
	name = Sajith Perera
	email = sajith.perera@congenica.com
[github]
    user = sajp
[color]
    ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
  [color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
  [color "status"]
    added = yellow
    changed = green
    untracked = cyan
    branch = magenta
    unmerged = red
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[core]
	excludesfile = ~/.gitignore
	editor = vim
[alias]
    d = difftool
    ds = diff --staged
    last = log -1 HEAD
    s = status
    co = checkout
    br = branch
    ci = commit
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    fl = log -u
    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    pub = "!git push -u origin $(git branch-name)"
    pub-force = "!git push --force -u origin $(git branch-name)"
    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"
    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"
    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!git co dev && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
[merge]
	tool = vimdiff
	conflictstyle = diff3
	prompt = false
[help]
	autocorrect = 10
[push]
	default = current
[rerere]
	enabled = 1
[rebase]
	autosquash = true
[fetch]
	prune = true
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
